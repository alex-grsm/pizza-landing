// deploy.js
import * as ftp from 'basic-ftp';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  host: process.env.FTP_HOST,
  user: process.env.FTP_USER,
  password: process.env.FTP_PASSWORD,
  secure: process.env.FTP_SECURE === 'true',
  localRoot: path.join(__dirname, 'dist'),
  remoteRoot: process.env.FTP_REMOTE_PATH || '/'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
async function uploadDir(client, localDir, remoteDir) {
  const files = fs.readdirSync(localDir);
  
  for (const file of files) {
    const localPath = path.join(localDir, file);
    const remotePath = path.join(remoteDir, file).replace(/\\/g, '/');
    const stat = fs.statSync(localPath);
    
    if (stat.isDirectory()) {
      try {
        // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        await client.ensureDir(remotePath);
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${remotePath}`);
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        await uploadDir(client, localPath, remotePath);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${remotePath}:`, err.message);
      }
    } else {
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        await client.uploadFrom(localPath, remotePath);
        console.log(`üì§ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${remotePath}`);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ ${remotePath}:`, err.message);
      }
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è
async function deploy() {
  const client = new ftp.Client();
  client.ftp.verbose = process.env.FTP_VERBOSE === 'true';
  
  try {
    console.log('üì° –ù–∞—á–∏–Ω–∞–µ–º FTP –¥–µ–ø–ª–æ–π...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É
    await client.access({
      host: config.host,
      user: config.user,
      password: config.password,
      secure: config.secure
    });
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —Å–µ—Ä–≤–µ—Ä—É');
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await client.ensureDir(config.remoteRoot);
    console.log(`üìÅ –£–¥–∞–ª–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${config.remoteRoot}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
    await uploadDir(client, config.localRoot, config.remoteRoot);
    
    console.log('‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ:', err.message);
    process.exit(1);
  } finally {
    client.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
deploy();